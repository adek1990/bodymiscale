blueprint:
  name: "User Profile Sensor Assignment by Profile ID (input_number)"
  description: "Assigns weight and impedance to user entities based on profile_id sensor and individual user profile IDs"
  domain: automation
  input:
    weight_sensor:
      name: "Weight Sensor"
      description: "Select the weight sensor (ESPHome or BLE Monitor)"
      selector:
        entity:
          filter:
            domain: sensor
    impedance_sensor:
      name: "Impedance Sensor"
      description: "Select the impedance sensor (ESPHome or BLE Monitor)"
      selector:
        entity:
          filter:
            domain: sensor
      default: ""
    profile_id_sensor:
      name: "Profile ID Sensor"
      description: "Select the Profile ID sensor (ESPHome or BLE Monitor)"
      selector:
        entity:
          filter:
            domain: sensor
    last_time_sensor:
      name: "Last Time Sensor"
      description: "Select the last time sensor (ESPHome or BLE Monitor)"
      selector:
        entity:
          filter:
            domain: sensor
      default: ""

    num_users:
      name: "Number of Users"
      description: "Select the number of users to track"
      selector:
        select:
          options:
            - "1"
            - "2"
            - "3"
            - "4"
            - "5"

    ## User 1 (Always required)
    user1_name:
      name: "User 1 Name"
      selector:
        text: {}

    user1_profile_id:
      name: "User 1 Profile Id"
      selector:
        number:
          min: 1
          max: 5
      default: 1
    user1_weight:
      name: "User 1 Weight Entity"
      selector:
        entity:
          filter:
            domain: input_number

    user1_impedance:
      name: "User 1 Impedance Entity"
      selector:
        entity:
          filter:
            domain: input_number
      default: ""

    user1_last_time:
      name: "User 1 Last Measurement Time"
      selector:
        entity:
          filter:
            domain: input_datetime
      default: ""

    ## User 2 (Conditionnel)
    user2_name:
      name: "User 2 Name"
      selector:
        text: {}
      default: ""
    user2_profile_id:
      name: "User 2 Profile ID"
      selector:
        number:
          min: 1
          max: 5
      default: 2
    user2_weight:
      name: "User 2 Weight Entity"
      selector:
        entity:
          filter:
            domain: input_number
      default: ""
    user2_impedance:
      name: "User 2 Impedance Entity"
      selector:
        entity:
          filter:
            domain: input_number
      default: ""
    user2_last_time:
      name: "User 2 Last Measurement Time"
      selector:
        entity:
          filter:
            domain: input_datetime
      default: ""

    ## user 3 (Conditionnel)
    user3_name:
      name: "user 3 Name"
      selector:
        text: {}
      default: ""
    user3_profile_id:
      name: "User 3 Profile Id"
      selector:
        number:
          min: 1
          max: 5
      default: 3
    user3_weight:
      name: "user 3 Weight Entity"
      selector:
        entity:
          filter:
            domain: input_number
      default: ""
    user3_impedance:
      name: "user 3 Impedance Entity"
      selector:
        entity:
          filter:
            domain: input_number
      default: ""
    user3_last_time:
      name: "user 3 Last Measurement Time"
      selector:
        entity:
          filter:
            domain: input_datetime
      default: ""

    ## user 4 (Conditionnel)
    user4_name:
      name: "user 4 Name"
      selector:
        text: {}
      default: ""
    user4_profile_id:
      name: "User 4 Profile Id"
      selector:
        number:
          min: 1
          max: 5
      default: 4
    user4_weight:
      name: "user 4 Weight Entity"
      selector:
        entity:
          filter:
            domain: input_number
      default: ""
    user4_impedance:
      name: "user 4 Impedance Entity"
      selector:
        entity:
          filter:
            domain: input_number
      default: ""
    user4_last_time:
      name: "user 4 Last Measurement Time"
      selector:
        entity:
          filter:
            domain: input_datetime
      default: ""

    ## user 5 (Conditionnel)
    user5_name:
      name: "user 5 Name"
      selector:
        text: {}
      default: ""
    user5_profile_id:
      name: "User 5 Profile Id"
      selector:
        number:
          min: 1
          max: 5
      default: 5
    user5_weight:
      name: "user 5 Weight Entity"
      selector:
        entity:
          filter:
            domain: input_number
      default: ""
    user5_impedance:
      name: "user 5 Impedance Entity"
      selector:
        entity:
          filter:
            domain: input_number
      default: ""
    user5_last_time:
      name: "user 5 Last Measurement Time"
      selector:
        entity:
          filter:
            domain: input_datetime
      default: ""

variables:
  weight_sensor: !input weight_sensor
  impedance_sensor: !input impedance_sensor
  last_time_sensor: !input last_time_sensor
  profile_id_sensor: !input profile_id_sensor
  num_users: !input num_users
  users:
    - enabled: true
      name: !input user1_name
      profile_id: !input user1_profile_id
      weight: !input user1_weight
      impedance: !input user1_impedance
      last_time: !input user1_last_time
    - enabled: "{{ num_users | int >= 2 }}"
      name: !input user2_name
      profile_id: !input user2_profile_id
      weight: !input user2_weight
      impedance: !input user2_impedance
      last_time: !input user2_last_time
    - enabled: "{{ num_users | int >= 3 }}"
      name: !input user3_name
      profile_id: !input user3_profile_id
      weight: !input user3_weight
      impedance: !input user3_impedance
      last_time: !input user3_last_time
    - enabled: "{{ num_users | int >= 4 }}"
      name: !input user4_name
      profile_id: !input user4_profile_id
      weight: !input user4_weight
      impedance: !input user4_impedance
      last_time: !input user4_last_time
    - enabled: "{{ num_users | int >= 5 }}"
      name: !input user5_name
      profile_id: !input user5_profile_id
      weight: !input user5_weight
      impedance: !input user5_impedance
      last_time: !input user5_last_time

trigger:
  - trigger: state
    entity_id: !input weight_sensor

action:
  - delay: "00:00:15"

  - variables:
      weight: "{{ states(weight_sensor) | float(0) }}"
      impedance: "{{ states(impedance_sensor) | float(0) }}"
      profile_id: "{{ states(profile_id_sensor) | int(0) }}"
      last_time: >-
        {% if last_time_sensor != '' and states(last_time_sensor) not in ['unavailable', 'unknown', 'none'] and states(last_time_sensor) is defined %}
          {{ states(last_time_sensor) | as_datetime | as_local }}
        {% else %}
          none
        {% endif %}

  - condition: template
    value_template: "{{ weight != 0 and weight != 'unknown' and weight != 'unavailable' }}"

  - repeat:
      count: "{{ num_users | int }}"
      sequence:
        - variables:
            user: "{{ users[repeat.index - 1] }}"
            user_name: "{{ user.name }}"
            user_profile_id: "{{ user.profile_id }}"
            user_weight: "{{ user.weight }}"
            user_impedance: "{{ user.impedance }}"
            user_last_time: "{{ user.last_time }}"

        - condition: template
          value_template: "{{ user.enabled and user_profile_id == profile_id }}"

        - choose:
            - conditions:
                - "{{ user_weight != '' }}"
              sequence:
                - action: input_number.set_value
                  target:
                    entity_id: "{{ user_weight }}"
                  data:
                    value: "{{ weight }}"

        - choose:
            - conditions:
                - "{{ user_impedance != '' and impedance | float(0) != 0 }}"
              sequence:
                - action: input_number.set_value
                  target:
                    entity_id: "{{ user_impedance }}"
                  data:
                    value: "{{ impedance }}"

        - choose:
            - conditions:
                - "{{ user_last_time != '' and last_time != none and last_time is defined}}"
              sequence:
                - action: input_datetime.set_datetime
                  target:
                    entity_id: "{{ user_last_time }}"
                  data:
                    datetime: "{{ last_time }}"
