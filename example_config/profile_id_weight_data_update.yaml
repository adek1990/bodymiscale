blueprint:
  name: "User Profile Sensor Assignment by Profile ID (input_number)"
  description: "Assigns weight and impedance to user entities based on profile_id sensor and individual user profile IDs"
  domain: automation
  input:
    profile_id_sensor:
      name: "Profile ID Sensor"
      description: "Sensor providing current profile ID (1â€“3)"
      selector:
        entity:
          filter:
            domain: sensor

    weight_sensor:
      name: "Weight Sensor"
      selector:
        entity:
          filter:
            domain: sensor
    impedance_sensor:
      name: "Impedance Sensor"
      selector:
        entity:
          filter:
            domain: sensor
      default: ""
    last_time_sensor:
      name: "Last Time Sensor"
      selector:
        entity:
          filter:
            domain: sensor
      default: ""

    # Profile ID per user
    user1_profile_id:
      name: "User 1 Profile ID"
      selector:
        number:
          min: 1
          max: 10
    user1_weight:
      name: "User 1 Weight Entity"
      selector:
        entity:
          filter:
            domain: input_number
    user1_impedance:
      name: "User 1 Impedance Entity"
      selector:
        entity:
          filter:
            domain: input_number
    user1_last_time:
      name: "User 1 Last Time Entity"
      selector:
        entity:
          filter:
            domain: input_datetime

    user2_profile_id:
      name: "User 2 Profile ID"
      selector:
        number:
          min: 1
          max: 10
    user2_weight:
      name: "User 2 Weight Entity"
      selector:
        entity:
          filter:
            domain: input_number
    user2_impedance:
      name: "User 2 Impedance Entity"
      selector:
        entity:
          filter:
            domain: input_number
    user2_last_time:
      name: "User 2 Last Time Entity"
      selector:
        entity:
          filter:
            domain: input_datetime

    user3_profile_id:
      name: "User 3 Profile ID"
      selector:
        number:
          min: 1
          max: 10
    user3_weight:
      name: "User 3 Weight Entity"
      selector:
        entity:
          filter:
            domain: input_number
    user3_impedance:
      name: "User 3 Impedance Entity"
      selector:
        entity:
          filter:
            domain: input_number
    user3_last_time:
      name: "User 3 Last Time Entity"
      selector:
        entity:
          filter:
            domain: input_datetime

trigger:
  - platform: state
    entity_id: !input weight_sensor

action:
  - delay: "00:00:02"

  - variables:
      weight: "{{ states(weight_sensor) | float(0) }}"
      impedance: "{{ states(impedance_sensor) | float(0) }}"
      last_time: >-
        {% if last_time_sensor != '' and states(last_time_sensor) not in ['unavailable', 'unknown', 'none'] %}
          {{ states(last_time_sensor) | as_datetime | as_local }}
        {% else %}
          none
        {% endif %}
      profile_id: "{{ states(profile_id_sensor) | int(0) }}"

  - condition: template
    value_template: "{{ weight > 0 }}"

  - choose:
      - conditions: "{{ profile_id == (states('input_number.user1_profile_id') | int(0)) }}"
        sequence:
          - service: input_number.set_value
            target:
              entity_id: !input user1_weight
            data:
              value: "{{ weight }}"
          - condition: template
            value_template: "{{ impedance > 0 }}"
          - service: input_number.set_value
            target:
              entity_id: !input user1_impedance
            data:
              value: "{{ impedance }}"
          - condition: template
            value_template: "{{ last_time != none }}"
          - service: input_datetime.set_datetime
            target:
              entity_id: !input user1_last_time
            data:
              datetime: "{{ last_time }}"

      - conditions: "{{ profile_id == (states('input_number.user2_profile_id') | int(0)) }}"
        sequence:
          - service: input_number.set_value
            target:
              entity_id: !input user2_weight
            data:
              value: "{{ weight }}"
          - condition: template
            value_template: "{{ impedance > 0 }}"
          - service: input_number.set_value
            target:
              entity_id: !input user2_impedance
            data:
              value: "{{ impedance }}"
          - condition: template
            value_template: "{{ last_time != none }}"
          - service: input_datetime.set_datetime
            target:
              entity_id: !input user2_last_time
            data:
              datetime: "{{ last_time }}"

      - conditions: "{{ profile_id == (states('input_number.user3_profile_id') | int(0)) }}"
        sequence:
          - service: input_number.set_value
            target:
              entity_id: !input user3_weight
            data:
              value: "{{ weight }}"
          - condition: template
            value_template: "{{ impedance > 0 }}"
          - service: input_number.set_value
            target:
              entity_id: !input user3_impedance
            data:
              value: "{{ impedance }}"
          - condition: template
            value_template: "{{ last_time != none }}"
          - service: input_datetime.set_datetime
            target:
              entity_id: !input user3_last_time
            data:
              datetime: "{{ last_time }}"
